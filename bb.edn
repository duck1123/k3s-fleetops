{:paths ["src"]
 :deps  {io.github.l3nz/cli-matic {:sha "ddbcad077ba63e0abb3597a7ec6f62c40f91c9e5"}}
 :tasks
 {:requires
  ([babashka.fs :as fs]
   [clojure.string :as str]
   [k3s-fleetops.core :as c])

  apply-git-hooks
  {:doc  "Register git hooks"
   :task (shell "git config core.hooksPath .githooks")}

  apply-master-application
  {:doc  "Install 00-master argo application"
   :task (shell "kubectl apply -f target/infra-manifests/00-master.yaml")}

  build
  {:doc  "Convert all edn files to yaml"
   :task (exec 'k3s-fleetops.core/build {})}

  build-charts
  {:doc  "Build nixidy charts"
   :task (shell "nixidy build .#dev")}

  ci
  {:doc     "Run all build steps"
   :depends [clean generate switch-charts build]}

  clean
  {:doc  "Clean generated files"
   :task (shell "rm -rf target")}

  create-forgejo-password-secret
  {:doc  "Create secret for forgejo"
   :task (c/create-sealed-secret :forgejo)}

  create-harbor-password-secret
  {:doc  "Create secret for Harbor"
   :task (c/create-sealed-secret :harbor)}

  create-keycloak-password-secret
  {:doc  "Create secret for Keycloak"
   :task (c/create-sealed-secret :keycloak)}

  create-sealed-secret
  {:doc  "Create sealed secrets"
   :task (c/create-sealed-secret)}

  delete-secret-controller
  {:doc "Delete the sealed secrets controller"
   :task
   (let [namespace "sealed-secrets"
         command   (str "kubectl -n \"" namespace "\" delete pod -l name=sealed-secrets-controller")]
     (shell command))}

  format
  {:doc  "format code"
   :task (shell "sh -c \"nixfmt **/*.nix\"")}

  forward-argocd
  {:doc  "Forward the argocd port"
   :task (shell "kubectl port-forward svc/argocd-server -n argocd 8080:443")}

  forward-traefik-dashboard
  {:doc "Expose traefik dashboard"
   :task
   (do
     (let [get-name-command "kubectl get pods --selector \"app.kubernetes.io/name=traefik\" --output=name"
           pod-name         (shell get-name-command)
           command          (str "kubectl port-forward " pod-name " 9000:9000")]
       (shell command)))}

  generate
  {:doc  "Run CRD generators"
   :task (shell "nix run '.#generate'")}

  ;; https://github.com/bitnami-labs/sealed-secrets/blob/main/docs/bring-your-own-certificates.md
  install-sealed-key
  {:doc "Upload sealed secrets key"
   :task
   (let [dry-run?    false
         namespace   "sealed-secrets"
         secret-name "imported-secret"
         public-key  "tls.crt"
         private-key "tls.key"
         command     (str
                      "kubectl "
                      "-n \"" namespace "\" "
                      "create secret tls "
                      "\"" secret-name "\" "
                      "--cert=\"" public-key "\" "
                      "--key=\"" private-key "\" ")]
     (if dry-run?
       (println command)
       (shell command)))}

  switch-charts
  {:doc  "Switch nixidy charts"
   :task (shell "nixidy switch .#dev")}

  generate-key-file
  {:doc  "Generate random keyfile"
   :task (shell "openssl rand -out keepass.keyx 256")}

  k3d-create
  {:doc  "Create a k3d cluster"
   :task (c/k3d-create)}

  apply-sealed-key-label
  {:doc "Marked the sealed key as active"
   :task
   (let [dry-run?    false
         namespace   "sealed-secrets"
         secret-name "imported-secret"
         command     (str "kubectl -n \"" namespace  "\" label secret \"" secret-name  "\" sealedsecrets.bitnami.com/sealed-secrets-key=active")]
     (if dry-run?
       (println command)
       (shell command)))}}}
