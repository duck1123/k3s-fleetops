{:tasks
 {:requires
  ([babashka.fs :as fs]
   [clojure.string :as str])

  apply-git-hooks
  {:docs "Register git hooks"
   :task (shell "git config core.hooksPath .githooks")}

  apply-master-application
  {:docs "Install 00-master argo application"
   :task (shell "kubectl apply -f target/manifests/00-master.yaml")}

  build
  {:docs "Convert all edn files to yaml"
   :task
   (let [dry-run?        false
         verbose?        false
         cwd             (fs/cwd)
         output-dir      "target"
         output-path     (fs/path cwd output-dir)
         relative-output (fs/relativize cwd output-path)
         files           (->> (fs/glob "." "**/*.edn")
                              (filter (fn [f] (not (.endsWith f "bb.edn"))))
                              (into []))]
     (let [command (str "mkdir -p " output-path)]
       (if dry-run?
         (println (str "[DRY-RUN] " command))
         (shell command)))
     (doseq [file files]
       (when verbose?
         (println (str "# File: " file "\n----")))
       (let [file-path             (fs/absolutize (fs/path file))
             input-parent          (fs/parent file)
             absolute-input-parent (fs/absolutize input-parent)
             relative-input-dir    (fs/relativize cwd absolute-input-parent)
             absolute              (fs/relativize cwd file-path)
             base-path             (fs/relativize absolute-input-parent file-path)
             base-name             (fs/strip-ext base-path)
             target-directory      (fs/path output-path relative-input-dir)
             target-path           (fs/path target-directory (str base-name ".yaml"))]
         (when-not (fs/exists? target-directory)
           (if dry-run?
             (println (str "[DRY-RUN] sh -c \"mkdir -p " target-directory "\""))
             (fs/create-dirs target-directory)))
         (let [target-path-string (fs/relativize cwd target-path)
               parts              [(str "cat " absolute)
                                   (str "jet -i edn -o yaml")
                                   (str (if verbose? "tee " "dd of=") target-path-string)]
               command            (str "sh -c \"" (str/join " | " parts) "\"")]
           (if dry-run?
             (println (str "[DRY-RUN] " command))
             (shell command)))))
     (let [yaml-files (->> (fs/glob "." "**/*.yaml")
                           (filter (fn [f]
                                     (not (or
                                           (fs/starts-with? f relative-output)
                                           (fs/starts-with? f "fleet")))))
                           (into []))]
       (doseq [file yaml-files]
         (let [file-path             (fs/absolutize (fs/path file))
               input-parent          (fs/parent file)
               absolute-input-parent (fs/absolutize input-parent)
               relative-input-dir    (fs/relativize cwd absolute-input-parent)
               target-directory      (fs/path output-path relative-input-dir)]
           (when-not (fs/exists? target-directory)
             (if dry-run?
               (println (str "[DRY-RUN] sh -c \"mkdir -p " target-directory "\""))
               (fs/create-dirs target-directory)))
           (if dry-run?
             (println (str "copy" file-path " - " target-directory))
             (fs/copy file-path target-directory {:replace-existing true}))))))}

  clean
  {:task (shell "rm -rf target")}

  generate-key-file
  {:task (shell "openssl rand -out keepass.keyx 256")}

  get-harbor-password
  {:task
   (let [db-password (:out (shell {:out :string} "gum input --password --prompt 'Enter Keepass Password> '"))
         db-path     (or
                      (System/getenv "KEEPASS_DB_PATH")
                      (throw (ex-info "KEEPASS_DB_PATH not set" {})))
         cmd         (str "keepassxc-cli show -s -a Password "
                          db-path " /Kubernetes/Harbor")]
     (println "password: " db-password)
     (let [harbor-password (:out (shell {:in db-password :out :string} cmd))]
       (println "Harbor Password: " harbor-password)))}

  create-harbor-password-secret
  {:task
   (let [harbor-ns       "harbor"
         key-name        "HARBOR_ADMIN_PASSWORD"
         key-path        "/Kubernetes/Harbor"
         secret-name     "harbor-admin-password"
         controller-name "sealed-secrets"
         controller-ns   "sealed-secrets"
         sealed-file     "harbor-admin-password-sealed-secret.json"
         db-path         (or (System/getenv "KEEPASS_DB_PATH")
                             (throw (ex-info "KEEPASS_DB_PATH not set" {})))
         prompt-cmd      "gum input --password --prompt 'Enter Keepass Password> '"
         db-password     (:out (shell {:out :string} prompt-cmd))
         harbor-pass     (->> (str "keepassxc-cli show -s -a Password " db-path " " key-path)
                              (shell {:in db-password :out :string})
                              :out)
         args            ["kubectl create secret generic"
                          secret-name
                          (str "--namespace " harbor-ns)
                          "--dry-run=client"
                          (str "--from-file=" key-name "=/dev/stdin")
                          "-o json"]
         secret-json     (:out (shell {:in harbor-pass :out :string} (str/join " " args)))
         seal-args       ["kubeseal"
                          (str "--namespace " harbor-ns)
                          (str "--controller-name " controller-name)
                          (str "--controller-namespace " controller-ns)
                          "--secret-file /dev/stdin"
                          (str "--sealed-secret-file " sealed-file)]
         seal-cmd        (str/join " " seal-args)]
     (shell {:in secret-json} seal-cmd))}

  delete-secret-controller
  {:docs "Delete the sealed secrets controller"
   :task
   (let [namespace "sealed-secrets"
         command   (str "kubectl -n \"" namespace "\" delete pod -l name=sealed-secrets-controller")]
     (shell command))}

  forward-argocd
  {:docs "Forward the argocd port"
   :task (shell "kubectl port-forward svc/argocd-server -n argocd 8080:443")}

  forward-traefik-dashboard
  {:docs "Expose traefik dashboard"
   :task
   (do
     (let [get-name-command "kubectl get pods --selector \"app.kubernetes.io/name=traefik\" --output=name"
           pod-name         (shell get-name-command)
           command          (str "kubectl port-forward " pod-name " 9000:9000")]
       (shell command)))}

  ;; https://github.com/bitnami-labs/sealed-secrets/blob/main/docs/bring-your-own-certificates.md
  install-sealed-key
  {:docs "Upload sealed secrets key"
   :task
   (let [dry-run?    false
         namespace   "sealed-secrets"
         secret-name "imported-secret"
         public-key  "tls.crt"
         private-key "tls.key"
         command     (str
                      "kubectl "
                      "-n \"" namespace "\" "
                      "create secret tls "
                      "\"" secret-name "\" "
                      "--cert=\"" public-key "\" "
                      "--key=\"" private-key "\" ")]
     (if dry-run?
       (println command)
       (shell command)))}

  k3d-create
  {:description "Create a k3d cluster"
   :task
   (let [dry-run?         false
         use-ingress      false
         create-registry? false
         use-registry?    false
         api-port         6550
         registry-name    "registry"
         registry-host    "k3d-myregistry.localtest.me:12345"
         server-count     1
         cmd              (clojure.string/join
                           " "
                           ["k3d cluster create"
                            "--api-port" api-port
                            "-p \"80:80@loadbalancer\""
                            "-p \"443:443@loadbalancer\""
                            (when-not use-ingress "--k3s-arg \"--disable=traefik@server:0\"")
                            "--servers" server-count
                            "--volume kube-nfs-volume:/opt/local-path-provisioner"
                            (when create-registry?
                              (str "--registry-create " registry-name))
                            (when use-registry?
                              (str "--registry-use " registry-host))
                            "--kubeconfig-update-default"])]
     (if dry-run?
       (println cmd)
       (shell cmd)))}

  apply-sealed-key-label
  {:docs "Marked the sealed key as active"
   :task
   (let [dry-run?    false
         namespace   "sealed-secrets"
         secret-name "imported-secret"
         command     (str "kubectl -n \"" namespace  "\" label secret \"" secret-name  "\" sealedsecrets.bitnami.com/sealed-secrets-key=active")]
     (if dry-run?
       (println command)
       (shell command)))}}}
