apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: registry
    app.kubernetes.io/instance: harbor
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: harbor
    app.kubernetes.io/version: 2.13.0
    helm.sh/chart: harbor-24.6.0
  name: harbor-registry
  namespace: harbor
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/component: registry
      app.kubernetes.io/instance: harbor
      app.kubernetes.io/name: harbor
  strategy:
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/configmap: c7646412d605b967ad6e834aed12c097d0cdba8691a4ecc58ccdcfd1c5312358
        checksum/secret: 6add33eaa08df493f78b6368d7e8e03933677354b24adf1cb6ef2b488297e751
        checksum/secret-core: 29e09d760b9de9c5d20f57c4fd96aa2ad06b24c56c983cddacff580d1a4db7f7
        checksum/secret-jobservice: ffbbcba74c66a0979b2f72c84267fb9fc58d8a0c0c316cc04e84429f8fc168b0
      labels:
        app.kubernetes.io/component: registry
        app.kubernetes.io/instance: harbor
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: harbor
        app.kubernetes.io/version: 2.13.0
        helm.sh/chart: harbor-24.6.0
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: registry
                    app.kubernetes.io/instance: harbor
                    app.kubernetes.io/name: harbor
                topologyKey: kubernetes.io/hostname
              weight: 1
      automountServiceAccountToken: false
      containers:
        - env:
            - name: BITNAMI_DEBUG
              value: "false"
          envFrom:
            - secretRef:
                name: harbor-registry
          image: docker.io/bitnami/harbor-registry:2.13.0-debian-12-r1
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: registry
            timeoutSeconds: 5
          name: registry
          ports:
            - containerPort: 5000
              name: registry
            - containerPort: 5001
              name: debug
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /
              port: registry
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /tmp
              name: empty-dir
              subPath: tmp-dir
            - mountPath: /etc/ssl/certs
              name: empty-dir
              subPath: etc-ssl-certs-server
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/root.crt
              name: registry-root-certificate
              subPath: tls.crt
            - mountPath: /etc/registry/passwd
              name: registry-htpasswd
              subPath: passwd
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
        - env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CORE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-core
            - name: JOBSERVICE_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: harbor-jobservice
          envFrom:
            - secretRef:
                name: harbor-registry
          image: docker.io/bitnami/harbor-registryctl:2.13.0-debian-12-r3
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: registryctl
            timeoutSeconds: 5
          name: registryctl
          ports:
            - containerPort: 8080
              name: registryctl
          readinessProbe:
            failureThreshold: 6
            httpGet:
              path: /api/health
              port: registryctl
              scheme: HTTP
            initialDelaySeconds: 20
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /tmp
              name: empty-dir
              subPath: tmp-dir
            - mountPath: /etc/ssl/certs
              name: empty-dir
              subPath: etc-ssl-certs-controller
            - mountPath: /storage
              name: registry-data
            - mountPath: /etc/registry/config.yml
              name: registry-config
              subPath: config.yml
            - mountPath: /etc/registryctl/config.yml
              name: registry-config
              subPath: ctl-config.yml
      initContainers:
        - args:
            - -ec
            - cp -r /etc/ssl/certs/* /certs
          command:
            - /bin/bash
          image: docker.io/bitnami/harbor-registry:2.13.0-debian-12-r1
          imagePullPolicy: IfNotPresent
          name: certificate-volume-server
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /certs
              name: empty-dir
              subPath: etc-ssl-certs-server
        - args:
            - -ec
            - cp -r /etc/ssl/certs/* /certs
          command:
            - /bin/bash
          image: docker.io/bitnami/harbor-registryctl:2.13.0-debian-12-r3
          imagePullPolicy: IfNotPresent
          name: certificate-volume-controller
          resources:
            limits:
              cpu: 150m
              ephemeral-storage: 2Gi
              memory: 192Mi
            requests:
              cpu: 100m
              ephemeral-storage: 50Mi
              memory: 128Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          volumeMounts:
            - mountPath: /certs
              name: empty-dir
              subPath: etc-ssl-certs-controller
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: harbor-registry
      volumes:
        - emptyDir: {}
          name: empty-dir
        - name: registry-htpasswd
          secret:
            items:
              - key: REGISTRY_HTPASSWD
                path: passwd
            secretName: harbor-registry
        - name: registry-root-certificate
          secret:
            secretName: harbor-core
        - configMap:
            name: harbor-registry
          name: registry-config
        - name: registry-data
          persistentVolumeClaim:
            claimName: harbor-registry
