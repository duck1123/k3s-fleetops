apiVersion: apps/v1
kind: StatefulSet
metadata:
  labels:
    app.kubernetes.io/instance: postgresql
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: postgres
    app.kubernetes.io/version: "17.6"
    helm.sh/chart: postgres-1.5.8
  name: postgresql
  namespace: postgresql
spec:
  podManagementPolicy: OrderedReady
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/instance: postgresql
      app.kubernetes.io/name: postgres
  serviceName: postgresql
  template:
    metadata:
      annotations:
        checksum/customconfig: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/customscripts: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
        checksum/scripts: 7b665047e152f41e4aa69c658bd39fc48721b92a6972eed5e5bfc67fdcfdb33f
        checksum/secureconfig: 01ba4719c80b6fe911b091a7c05124b64eeece964e09c058ef8f9805daca546b
      labels:
        app.kubernetes.io/instance: postgresql
        app.kubernetes.io/name: postgres
    spec:
      containers:
        - env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: adminPassword
                  name: postgresql-password
            - name: PGDATA
              value: /var/lib/postgresql/data/pg
          image: docker.io/postgres:17.6
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -h localhost
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: postgres
          ports:
            - containerPort: 5432
              name: postgres
              protocol: TCP
          readinessProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -h localhost
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          startupProbe:
            exec:
              command:
                - sh
                - -c
                - pg_isready -h localhost
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          volumeMounts:
            - mountPath: /var/run
              name: run
            - mountPath: /tmp
              name: tmp
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
            - mountPath: /docker-entrypoint-initdb.d
              name: scripts
            - mountPath: /etc/postgresql
              name: configs
      initContainers:
        - command:
            - /initscripts/init.sh
          image: docker.io/postgres:17.6
          imagePullPolicy: IfNotPresent
          name: postgres-init
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 999
            runAsNonRoot: true
            runAsUser: 999
          volumeMounts:
            - mountPath: /initscripts
              name: initscripts
            - mountPath: /scripts
              name: scripts
            - mountPath: /configs
              name: configs
      securityContext:
        fsGroup: 999
        supplementalGroups:
          - 999
      serviceAccountName: default
      volumes:
        - emptyDir: {}
          name: run
        - emptyDir: {}
          name: tmp
        - emptyDir: {}
          name: scripts
        - emptyDir: {}
          name: configs
        - configMap:
            defaultMode: 365
            name: postgresql-scripts
          name: initscripts
        - emptyDir: {}
          name: postgres-data
  updateStrategy:
    type: RollingUpdate
