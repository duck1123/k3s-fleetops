apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/component: hub
    app.kubernetes.io/instance: jupyterhub
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: jupyterhub
    app.kubernetes.io/version: 4.1.6
    helm.sh/chart: jupyterhub-8.1.5
  name: jupyterhub-hub
  namespace: jupyterhub
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: hub
      app.kubernetes.io/instance: jupyterhub
      app.kubernetes.io/name: jupyterhub
  strategy:
    rollingUpdate: {}
    type: RollingUpdate
  template:
    metadata:
      annotations:
        checksum/hub-config: b266f3a95c56e2ad28d0f258380788b1e21dc857e8ddb4a07fc85eea152a6c42
        checksum/hub-secret: c66a0d2e7d781dd0d180ee81160eabf28ef2f69b24fca140d4d941cd9a7561a1
      labels:
        app.kubernetes.io/component: hub
        app.kubernetes.io/instance: jupyterhub
        app.kubernetes.io/managed-by: Helm
        app.kubernetes.io/name: jupyterhub
        app.kubernetes.io/version: 4.1.6
        helm.sh/chart: jupyterhub-8.1.5
        hub.jupyter.org/network-access-proxy-api: "true"
        hub.jupyter.org/network-access-proxy-http: "true"
        hub.jupyter.org/network-access-singleuser: "true"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app.kubernetes.io/component: hub
                    app.kubernetes.io/instance: jupyterhub
                    app.kubernetes.io/name: jupyterhub
                topologyKey: kubernetes.io/hostname
              weight: 1
      automountServiceAccountToken: true
      containers:
        - args:
            - --config
            - /etc/jupyterhub/jupyterhub_config.py
            - --upgrade-db
          command:
            - jupyterhub
          env:
            - name: PYTHONUNBUFFERED
              value: "1"
            - name: HELM_RELEASE_NAME
              value: jupyterhub
            - name: PROXY_API_SERVICE_PORT
              value: "8001"
            - name: HUB_SERVICE_PORT
              value: "8081"
            - name: POD_NAMESPACE
              valueFrom:
                fieldRef:
                  fieldPath: metadata.namespace
            - name: CONFIGPROXY_AUTH_TOKEN
              valueFrom:
                secretKeyRef:
                  key: proxy-token
                  name: jupyterhub-hub
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: jupyterhub-postgresql
          image: docker.io/bitnami/jupyterhub:4.1.6-debian-12-r15
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 30
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: http
            timeoutSeconds: 3
          name: hub
          ports:
            - containerPort: 8081
              name: http
          readinessProbe:
            failureThreshold: 30
            httpGet:
              path: /hub/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          resources:
            limits:
              cpu: 750m
              ephemeral-storage: 2Gi
              memory: 768Mi
            requests:
              cpu: 500m
              ephemeral-storage: 50Mi
              memory: 512Mi
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /hub/health
              port: http
            initialDelaySeconds: 10
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 3
          volumeMounts:
            - mountPath: /tmp
              name: empty-dir
              subPath: tmp-dir
            - mountPath: /etc/jupyterhub/jupyterhub_config.py
              name: config
              subPath: jupyterhub_config.py
            - mountPath: /etc/jupyterhub/z2jh.py
              name: config
              subPath: z2jh.py
            - mountPath: /usr/local/etc/jupyterhub/secret/
              name: secret
      initContainers:
        - args:
            - -ec
            - |
              #!/bin/bash

              set -o errexit
              set -o nounset
              set -o pipefail

              . /opt/bitnami/scripts/libos.sh
              . /opt/bitnami/scripts/liblog.sh
              . /opt/bitnami/scripts/libpostgresql.sh

              check_postgresql_connection() {
                  echo "SELECT 1" | postgresql_remote_execute "$POSTGRESQL_CLIENT_DATABASE_HOST" "$POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER" "$POSTGRESQL_CLIENT_DATABASE_NAME" "$POSTGRESQL_CLIENT_POSTGRES_USER" "$POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD"
              }

              info "Connecting to the PostgreSQL instance $POSTGRESQL_CLIENT_DATABASE_HOST:$POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER"
              if ! retry_while "check_postgresql_connection"; then
                  error "Could not connect to the database server"
                  return 1
              else
                  info "Connected to the PostgreSQL instance"
              fi
          command:
            - /bin/bash
          env:
            - name: POSTGRESQL_CLIENT_DATABASE_HOST
              value: jupyterhub-postgresql
            - name: POSTGRESQL_CLIENT_DATABASE_NAME
              value: bitnami_jupyterhub
            - name: POSTGRESQL_CLIENT_DATABASE_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_CLIENT_CREATE_DATABASE_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: password
                  name: jupyterhub-postgresql
            - name: POSTGRESQL_CLIENT_POSTGRES_USER
              value: bn_jupyterhub
          image: docker.io/bitnami/postgresql:17.4.0-debian-12-r10
          imagePullPolicy: IfNotPresent
          name: wait-for-db
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
                - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsGroup: 1001
            runAsNonRoot: true
            runAsUser: 1001
            seLinuxOptions: {}
            seccompProfile:
              type: RuntimeDefault
      securityContext:
        fsGroup: 1001
        fsGroupChangePolicy: Always
        supplementalGroups: []
        sysctls: []
      serviceAccountName: jupyterhub-hub
      volumes:
        - emptyDir: {}
          name: empty-dir
        - configMap:
            name: jupyterhub-hub
          name: config
        - name: secret
          secret:
            secretName: jupyterhub-hub
